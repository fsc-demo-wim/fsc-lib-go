/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/henderiw/fsc-lib-go/pkg/apis/fsc/v1"
	scheme "github.com/henderiw/fsc-lib-go/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// KubeControllersConfigurationListsGetter has a method to return a KubeControllersConfigurationListInterface.
// A group's client should implement this interface.
type KubeControllersConfigurationListsGetter interface {
	KubeControllersConfigurationLists(namespace string) KubeControllersConfigurationListInterface
}

// KubeControllersConfigurationListInterface has methods to work with KubeControllersConfigurationList resources.
type KubeControllersConfigurationListInterface interface {
	Create(ctx context.Context, kubeControllersConfigurationList *v1.KubeControllersConfigurationList, opts metav1.CreateOptions) (*v1.KubeControllersConfigurationList, error)
	Update(ctx context.Context, kubeControllersConfigurationList *v1.KubeControllersConfigurationList, opts metav1.UpdateOptions) (*v1.KubeControllersConfigurationList, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.KubeControllersConfigurationList, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.KubeControllersConfigurationListList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.KubeControllersConfigurationList, err error)
	KubeControllersConfigurationListExpansion
}

// kubeControllersConfigurationLists implements KubeControllersConfigurationListInterface
type kubeControllersConfigurationLists struct {
	client rest.Interface
	ns     string
}

// newKubeControllersConfigurationLists returns a KubeControllersConfigurationLists
func newKubeControllersConfigurationLists(c *FscV1Client, namespace string) *kubeControllersConfigurationLists {
	return &kubeControllersConfigurationLists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the kubeControllersConfigurationList, and returns the corresponding kubeControllersConfigurationList object, and an error if there is any.
func (c *kubeControllersConfigurationLists) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.KubeControllersConfigurationList, err error) {
	result = &v1.KubeControllersConfigurationList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of KubeControllersConfigurationLists that match those selectors.
func (c *kubeControllersConfigurationLists) List(ctx context.Context, opts metav1.ListOptions) (result *v1.KubeControllersConfigurationListList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.KubeControllersConfigurationListList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested kubeControllersConfigurationLists.
func (c *kubeControllersConfigurationLists) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a kubeControllersConfigurationList and creates it.  Returns the server's representation of the kubeControllersConfigurationList, and an error, if there is any.
func (c *kubeControllersConfigurationLists) Create(ctx context.Context, kubeControllersConfigurationList *v1.KubeControllersConfigurationList, opts metav1.CreateOptions) (result *v1.KubeControllersConfigurationList, err error) {
	result = &v1.KubeControllersConfigurationList{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(kubeControllersConfigurationList).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a kubeControllersConfigurationList and updates it. Returns the server's representation of the kubeControllersConfigurationList, and an error, if there is any.
func (c *kubeControllersConfigurationLists) Update(ctx context.Context, kubeControllersConfigurationList *v1.KubeControllersConfigurationList, opts metav1.UpdateOptions) (result *v1.KubeControllersConfigurationList, err error) {
	result = &v1.KubeControllersConfigurationList{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		Name(kubeControllersConfigurationList.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(kubeControllersConfigurationList).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the kubeControllersConfigurationList and deletes it. Returns an error if one occurs.
func (c *kubeControllersConfigurationLists) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *kubeControllersConfigurationLists) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched kubeControllersConfigurationList.
func (c *kubeControllersConfigurationLists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.KubeControllersConfigurationList, err error) {
	result = &v1.KubeControllersConfigurationList{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("kubecontrollersconfigurationlists").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/henderiw/fsc-lib-go/pkg/apis/fsc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeControllersConfigurationListLister helps list KubeControllersConfigurationLists.
// All objects returned here must be treated as read-only.
type KubeControllersConfigurationListLister interface {
	// List lists all KubeControllersConfigurationLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeControllersConfigurationList, err error)
	// KubeControllersConfigurationLists returns an object that can list and get KubeControllersConfigurationLists.
	KubeControllersConfigurationLists(namespace string) KubeControllersConfigurationListNamespaceLister
	KubeControllersConfigurationListListerExpansion
}

// kubeControllersConfigurationListLister implements the KubeControllersConfigurationListLister interface.
type kubeControllersConfigurationListLister struct {
	indexer cache.Indexer
}

// NewKubeControllersConfigurationListLister returns a new KubeControllersConfigurationListLister.
func NewKubeControllersConfigurationListLister(indexer cache.Indexer) KubeControllersConfigurationListLister {
	return &kubeControllersConfigurationListLister{indexer: indexer}
}

// List lists all KubeControllersConfigurationLists in the indexer.
func (s *kubeControllersConfigurationListLister) List(selector labels.Selector) (ret []*v1.KubeControllersConfigurationList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeControllersConfigurationList))
	})
	return ret, err
}

// KubeControllersConfigurationLists returns an object that can list and get KubeControllersConfigurationLists.
func (s *kubeControllersConfigurationListLister) KubeControllersConfigurationLists(namespace string) KubeControllersConfigurationListNamespaceLister {
	return kubeControllersConfigurationListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeControllersConfigurationListNamespaceLister helps list and get KubeControllersConfigurationLists.
// All objects returned here must be treated as read-only.
type KubeControllersConfigurationListNamespaceLister interface {
	// List lists all KubeControllersConfigurationLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeControllersConfigurationList, err error)
	// Get retrieves the KubeControllersConfigurationList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeControllersConfigurationList, error)
	KubeControllersConfigurationListNamespaceListerExpansion
}

// kubeControllersConfigurationListNamespaceLister implements the KubeControllersConfigurationListNamespaceLister
// interface.
type kubeControllersConfigurationListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeControllersConfigurationLists in the indexer for a given namespace.
func (s kubeControllersConfigurationListNamespaceLister) List(selector labels.Selector) (ret []*v1.KubeControllersConfigurationList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeControllersConfigurationList))
	})
	return ret, err
}

// Get retrieves the KubeControllersConfigurationList from the indexer for a given namespace and name.
func (s kubeControllersConfigurationListNamespaceLister) Get(name string) (*v1.KubeControllersConfigurationList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubecontrollersconfigurationlist"), name)
	}
	return obj.(*v1.KubeControllersConfigurationList), nil
}

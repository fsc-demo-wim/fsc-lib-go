/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/henderiw/fsc-lib-go/pkg/apis/fsc.henderiw.be/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeControllersConfigurationLister helps list KubeControllersConfigurations.
// All objects returned here must be treated as read-only.
type KubeControllersConfigurationLister interface {
	// List lists all KubeControllersConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeControllersConfiguration, err error)
	// KubeControllersConfigurations returns an object that can list and get KubeControllersConfigurations.
	KubeControllersConfigurations(namespace string) KubeControllersConfigurationNamespaceLister
	KubeControllersConfigurationListerExpansion
}

// kubeControllersConfigurationLister implements the KubeControllersConfigurationLister interface.
type kubeControllersConfigurationLister struct {
	indexer cache.Indexer
}

// NewKubeControllersConfigurationLister returns a new KubeControllersConfigurationLister.
func NewKubeControllersConfigurationLister(indexer cache.Indexer) KubeControllersConfigurationLister {
	return &kubeControllersConfigurationLister{indexer: indexer}
}

// List lists all KubeControllersConfigurations in the indexer.
func (s *kubeControllersConfigurationLister) List(selector labels.Selector) (ret []*v1.KubeControllersConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeControllersConfiguration))
	})
	return ret, err
}

// KubeControllersConfigurations returns an object that can list and get KubeControllersConfigurations.
func (s *kubeControllersConfigurationLister) KubeControllersConfigurations(namespace string) KubeControllersConfigurationNamespaceLister {
	return kubeControllersConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeControllersConfigurationNamespaceLister helps list and get KubeControllersConfigurations.
// All objects returned here must be treated as read-only.
type KubeControllersConfigurationNamespaceLister interface {
	// List lists all KubeControllersConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeControllersConfiguration, err error)
	// Get retrieves the KubeControllersConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeControllersConfiguration, error)
	KubeControllersConfigurationNamespaceListerExpansion
}

// kubeControllersConfigurationNamespaceLister implements the KubeControllersConfigurationNamespaceLister
// interface.
type kubeControllersConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeControllersConfigurations in the indexer for a given namespace.
func (s kubeControllersConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1.KubeControllersConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeControllersConfiguration))
	})
	return ret, err
}

// Get retrieves the KubeControllersConfiguration from the indexer for a given namespace and name.
func (s kubeControllersConfigurationNamespaceLister) Get(name string) (*v1.KubeControllersConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubecontrollersconfiguration"), name)
	}
	return obj.(*v1.KubeControllersConfiguration), nil
}

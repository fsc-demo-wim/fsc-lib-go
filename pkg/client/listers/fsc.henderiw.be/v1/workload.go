/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/henderiw/fsc-lib-go/pkg/apis/fsc.henderiw.be/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkLoadLister helps list WorkLoads.
// All objects returned here must be treated as read-only.
type WorkLoadLister interface {
	// List lists all WorkLoads in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkLoad, err error)
	// WorkLoads returns an object that can list and get WorkLoads.
	WorkLoads(namespace string) WorkLoadNamespaceLister
	WorkLoadListerExpansion
}

// workLoadLister implements the WorkLoadLister interface.
type workLoadLister struct {
	indexer cache.Indexer
}

// NewWorkLoadLister returns a new WorkLoadLister.
func NewWorkLoadLister(indexer cache.Indexer) WorkLoadLister {
	return &workLoadLister{indexer: indexer}
}

// List lists all WorkLoads in the indexer.
func (s *workLoadLister) List(selector labels.Selector) (ret []*v1.WorkLoad, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkLoad))
	})
	return ret, err
}

// WorkLoads returns an object that can list and get WorkLoads.
func (s *workLoadLister) WorkLoads(namespace string) WorkLoadNamespaceLister {
	return workLoadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkLoadNamespaceLister helps list and get WorkLoads.
// All objects returned here must be treated as read-only.
type WorkLoadNamespaceLister interface {
	// List lists all WorkLoads in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkLoad, err error)
	// Get retrieves the WorkLoad from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.WorkLoad, error)
	WorkLoadNamespaceListerExpansion
}

// workLoadNamespaceLister implements the WorkLoadNamespaceLister
// interface.
type workLoadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkLoads in the indexer for a given namespace.
func (s workLoadNamespaceLister) List(selector labels.Selector) (ret []*v1.WorkLoad, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkLoad))
	})
	return ret, err
}

// Get retrieves the WorkLoad from the indexer for a given namespace and name.
func (s workLoadNamespaceLister) Get(name string) (*v1.WorkLoad, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workload"), name)
	}
	return obj.(*v1.WorkLoad), nil
}
